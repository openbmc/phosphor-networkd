// This file was autogenerated.  Do not edit!
// See elog-gen.py for more details
#pragma once

#include <string>
#include <tuple>
#include <type_traits>
#include <sdbusplus/exception.hpp>
#include <phosphor-logging/log.hpp>
#include <phosphor-logging/elog.hpp>

namespace sdbusplus
{
namespace xyz
{
namespace openbmc_project
{
namespace Network
{
namespace Common
{
namespace Error
{
    struct SystemCallFailure;
} // namespace Error
} // namespace Common
} // namespace Network
} // namespace openbmc_project
} // namespace xyz
} // namespace sdbusplus

namespace phosphor
{
namespace logging
{
namespace xyz
{
namespace openbmc_project
{
namespace Network
{
namespace Common
{
namespace _SystemCallFailure
{

struct API
{
    static constexpr auto str = "API=%s";
    static constexpr auto str_short = "API";
    using type = std::tuple<std::decay_t<decltype(str)>,const char*>;
    explicit constexpr API(const char* a) : _entry(entry(str, a)) {};
    type _entry;
};
struct ERRNO
{
    static constexpr auto str = "ERRNO=%d";
    static constexpr auto str_short = "ERRNO";
    using type = std::tuple<std::decay_t<decltype(str)>,int32_t>;
    explicit constexpr ERRNO(int32_t a) : _entry(entry(str, a)) {};
    type _entry;
};

}  // namespace _SystemCallFailure

struct SystemCallFailure : public sdbusplus::exception_t
{
    static constexpr auto errName = "xyz.openbmc_project.Network.Common.SystemCallFailure";
    static constexpr auto errDesc = "System call failed.";
    static constexpr auto L = level::INFO;
    using API = _SystemCallFailure::API;
    using ERRNO = _SystemCallFailure::ERRNO;
    using metadata_types = std::tuple<API, ERRNO>;

    const char* name() const noexcept
    {
        return errName;
    }

    const char* description() const noexcept
    {
        return errDesc;
    }

    const char* what() const noexcept
    {
        return errName;
    }
};

} // namespace Common
} // namespace Network
} // namespace openbmc_project
} // namespace xyz
} // namepace logging
} //namespce phosphor
