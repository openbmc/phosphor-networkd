{
  "comments": [
    {
      "key": {
        "uuid": "c5a3bed6_6f4feaae",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-12T12:01:20Z",
      "side": 1,
      "message": "Wouldn\u0027t this be simpler as\n```\nfor (uint8_t i \u003d std::size(subnet.s6_addr32); i \u003e 0; --i)\n{\n   if (subnet.s6_addr32[i-1] !\u003d 0)\n   {\n       return (std::size(subnet.s6_addr32) - i) * 32 + __builtin_ctz(be32toh(subnet.s6_addr32[i-1]));\n   }\n}\n```",
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5a8ec72_0408cc59",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-03-15T16:30:41Z",
      "side": 1,
      "message": "It\u0027s less code. It is also is incomplete. It implicitly assumes all bits in the array at a lower numeric index to that being tested are all assigned \u00271\u0027. This is not necessarily true.\nThe code as written makes certain that all bits in the subnet mask supplied have left aligned \u00271\u0027 bits, and have no \u00271\u0027 bits trailing the first \u00270\u0027 bit found.\nAll bits of the subnet mask have to be analyzed, not just the least significant byte(s).",
      "parentUuid": "c5a3bed6_6f4feaae",
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dd682c3_a883952b",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-31T19:44:02Z",
      "side": 1,
      "message": "Sure, but that validation is easy enough to fix. I\u0027ll just send it out as a separate change since it also collapses both of the cidr functions.\n\nI\u0027d argue it\u0027s not that important to actually verify if the input is a real netmask, as we don\u0027t return an error but an arbitrary cidr value currently. Having an arbitrarily defined output would be fine, especially when you consider we only parse the values from the kernel.",
      "parentUuid": "e5a8ec72_0408cc59",
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a32fe005_bf3ff424",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2021-03-03T12:08:01Z",
      "side": 1,
      "message": "leadingZeros??",
      "range": {
        "startLine": 62,
        "startChar": 8,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc4026ea_2d90ec9e",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2021-03-03T16:40:15Z",
      "side": 1,
      "message": "builtin_ctz counts trailing zeroes. The subnet needs to be leading \u00271\u0027s and trailing \u00270\u0027s",
      "parentUuid": "a32fe005_bf3ff424",
      "range": {
        "startLine": 62,
        "startChar": 8,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d86435ab_02193b0a",
        "filename": "util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2021-03-31T19:44:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cc4026ea_2d90ec9e",
      "range": {
        "startLine": 62,
        "startChar": 8,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "acfac1bcd1d4e8cdd4c0a8e20b3e8d284f59eceb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}