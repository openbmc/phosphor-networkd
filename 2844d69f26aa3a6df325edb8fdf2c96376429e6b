{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "be933c02_26858856",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-05-04T11:14:33Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 10,
        "startChar": 62,
        "endLine": 10,
        "endChar": 66
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70cc8b82_bda0d49b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-17T04:07:37Z",
      "side": 1,
      "message": "Not Done. Please edit before merging",
      "parentUuid": "be933c02_26858856",
      "range": {
        "startLine": 10,
        "startChar": 62,
        "endLine": 10,
        "endChar": 66
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f152651c_21b22256",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-06-17T19:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70cc8b82_bda0d49b",
      "range": {
        "startLine": 10,
        "startChar": 62,
        "endLine": 10,
        "endChar": 66
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfb91d26_122c5f9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-05T02:18:43Z",
      "side": 1,
      "message": "I am good with the changes, Let william also take a look.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "136513ad_50ea9297",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-06T09:43:27Z",
      "side": 1,
      "message": "Jonathan, You need to merge this with the following.\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/50987\nhttps://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/509",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ce49698_69cc3b89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-06T14:57:04Z",
      "side": 1,
      "message": "This can, and needs to, precede the BMCWeb and the IPMI commits.\nThe existing BMCWeb and IPMI code will still function correctly with this change in place.\nThe IPMI commit will be approved shortly after I merge this.\n",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3689c326_3c6356c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-04-06T16:36:29Z",
      "side": 1,
      "message": "I\u0027m still not okay with this for the comment I left before. We have use cases where we use DHCP\u003dfalse and IPv6AcceptRA\u003dtrue managed by phosphor-netowrkd, so this change can\u0027t work for us.\n\nI don\u0027t see why we can\u0027t fix this in IPMI and redfish layers to smooth out any issues an end user would run into. We should be able to just set both properties when changing the DHCPv6 state.",
      "parentUuid": "bfb91d26_122c5f9f",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da5e8a86_0640a74c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-07T08:20:18Z",
      "side": 1,
      "message": "@william: what are those use cases? \n          stateless DHCP????",
      "parentUuid": "3689c326_3c6356c1",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "250bb07b_20ecb8b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-04-07T18:52:34Z",
      "side": 1,
      "message": "Just no DHCP at all. SLAAC with RA and we intentionally don\u0027t want to send DHCP requests.",
      "parentUuid": "da5e8a86_0640a74c",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "595dfc56_0ec32c24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-07T19:06:36Z",
      "side": 1,
      "message": "Which this commit supports.\nThe D-Bus value v6stateless turns off DHCPv4, and assigns IPv6AcceptRA\u003dt and DHCPv6Client\u003df. This blocks the BMC from trying to find a DHCPv6 server.\n\nThe current code performs a weird action where IPv6AcceptRA\u003df, and assigns a value to DHCPv6Client\u003df, which doesn\u0027t do anything. DHCPv6Client only matters when IPv6AcceptRA\u003dt.\n\nDHCP\u003dipv6 is effectively DHCP\u003dfalse. I was surprised to see the DHCP\u003dipv6 even occur in my recent testing. The map is supposed to set it false.",
      "parentUuid": "250bb07b_20ecb8b5",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2460cff7_ad1cf3f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-04-07T19:19:18Z",
      "side": 1,
      "message": "This is kinda insane at this point. We should probably just fix the d-bus schema to get rid of the enum combinatoric chaos.",
      "parentUuid": "595dfc56_0ec32c24",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87711844_252d5645",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-11T14:02:32Z",
      "side": 1,
      "message": "@william: We already have the acceptRA property, which can be used to accept only the RA but don\u0027t start the DHCP, That can be fixed here to support the stateless IP without DHCP.\n\n\u003e We should probably just fix the d-bus schema to get rid of the enum combinatoric chaos.\n\nWhat is the chaos here? We should support all the enum configuration.\n         - name: both\n          - name: v4v6stateless\n          - name: v6\n          - name: v6stateless\n          - name: v4\n          - name: none",
      "parentUuid": "2460cff7_ad1cf3f2",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37eb4a43_adb4790c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-21T20:48:30Z",
      "side": 1,
      "message": "William, what is your specific proposal to modify?\n\nThe code change submitted here encapsulates the management of the systemd.network configuration files to be fully controlled by phosphor-network. The prior code change that allowed IPv6AcceptRA leaked implementation details for systemd.network to both IPMI and Redfish.\n\nThe IPMI and Redfish code should request state changes, and allow phosphor-network to achieve those state changes. Performing the task with the enumerations above allows both IPMI and Redfish to request new state without knowledge of the underlying components. The whole of systemd-network could be replaced with some other IP stack and IPMI/Redfish requests would still operate the same.\n\nThe current upstream code can\u0027t even properly manage SLAAC.\nIf IPv6 DHCP is on, then DHCPv6Client is true, and thus is not performing SLAAC. \n    stream \u003c\u003c \"[IPv6AcceptRA]\\n\";\n    stream \u003c\u003c \"DHCPv6Client\u003d\";\n    stream \u003c\u003c (dhcpIsEnabled(IP::Protocol::IPv6) ? \"true\" : \"false\");\n\nIf a BMC is getting a SLAAC, then the RA has to be configured in a way to prevent the \"Managed\" bit from being returned to the submitter.\n\nWith the current upstream code there\u0027s no way to have IPv6 true and DHCPv6Client assigned false. This is the definition of SLAAC operation.\n\n\nThe changes I\u0027ve submitted, explicitly control DHCP, IPv6AcceptRA, and DHCPv6Client without relying on, or trying to divine correct operation, from current state.\n\nWith the changes proposed here even with the RA advertising the \"Managed\" bit, assigning IPv6AcceptRA\u003dtrue, DHCPClientv6\u003dfalse makes the BMC IP stack self assign.",
      "parentUuid": "87711844_252d5645",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c05f595a_5992e512",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-21T20:48:30Z",
      "side": 1,
      "message": "Maintainers,\nPlease suggest actionable changes, or approve the commit.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "293c8b13_bdaa38f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-27T15:26:23Z",
      "side": 1,
      "message": "@jonathan : What is broken now with this patch:  If user wants only the router published address and don\u0027t want any DHCP configuration then it will not work and that is breaking the old code..\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-networkd/+/48040/7/src/ethernet_interface.cpp#574\n\nYou have stopped allowing the user to change this property and it can be only controlled through DHCP option, which is breaking the old code.",
      "parentUuid": "c05f595a_5992e512",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ef14cd8_16991525",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-04-27T15:30:12Z",
      "side": 1,
      "message": "in the RA message if A bit is set(M and O is not set) then you don\u0027t need DHCP, You only need the advertised  prefix from the router and do the SLAAC.",
      "parentUuid": "293c8b13_bdaa38f4",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce5e4509_15b8410b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-27T17:40:08Z",
      "side": 1,
      "message": "I don\u0027t understand your comment:\n\u0027You have stopped allowing the user to change this property and it can be only controlled through DHCP option, which is breaking the old code.\u0027\n\nThis portion of the interface was being used by BMCWeb and phosphor-ipmi-host to directly control IPv6AcceptRA.\n\nI have created two other patches in those repos that perform the correct action.\n\nAre you saying someone may be using a method that invokes this function outside of IPMI and Redfish? This, IMO, validates that we have the incorrect API present on D-Bus.\n\nThe whole point of this change is to eliminate the leak of how systemd.network performs the work of getting DHCPv4 and v6 configured. Making the IPv6AcceptRA element visible on D-Bus was a mistake. It enables only part of the control necessary to correctly manage IPv6 address assignment. It needs to be ditched, IMO.\n\n\"in the RA message if A bit is set(M and O is not set) then you don\u0027t need DHCP, You only need the advertised  prefix from the router and do the SLAAC.\"\n\nWhat happens when those bits ARE set and you don\u0027t want DHCP? Having the ability to explicitly write DHCPv6Client true/false allows the BMC to choose to accept or to ignore those bits. I\u0027ve configured my radvd to enable both of those, and with IPv6AcceptRA\u003dtrue/DHCPv6Client\u003dtrue you get both DHCPv6 and SLAAC addresses. Using the \"v6stateless\" enum changes the combination to \"true/false\" and the BMC only performs a SLAAC assignment. This seems to me to be the correct operation.\n\nIf the directive from the maintainers is to make the flagged function continue to work, and to keep the technical debt associated, then an actionable recommendation has been provided.\n\nIs keeping that D-Bus entry active and performing some action the direction the maintainers wish?",
      "parentUuid": "6ef14cd8_16991525",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb038d4e_d19c0948",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-04-27T17:40:08Z",
      "side": 1,
      "message": "Thank you for your specific objection/observation.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "401b2592_235b8f4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-04T17:24:16Z",
      "side": 1,
      "message": "@jonathan : Before this patch we were having following types of IPv6 addresses supported.\n- DHCP stateful\n- DHCP stateless\n- Auto Configure address(SLAAC).\n\nWith this patch we are losing the third type of address.\n\nSay if user has disabled the DHCP, Can BMC get the SLAAC address (published by radvd where M, O is not set and  A bit is set), If not that is the concern.\n\n‘A’ flag set to 1 means a system will derive its IPv6 address based on the prefix information provided by a router  \n\n\u003e What happens when those bits(M \u0026 O) ARE set and you don\u0027t want DHCP? \n\nThat means disable the DHCP, However if the A bit is also set then BMC should get the SLAAC(Auto Configure address) and you can only get if the AcceptRa is true.\n\nHere is the meaning of certain flags:\n\nManaged (M flag) \u003d ‘1’ means the address is provided by stateful DHCPv6.\n\nOther (O flag) \u003d ‘1’ means that the address is provided by Stateless DHCPv6, useful for providing options when the client is doing SLAAC–Stateless Address Autoconfiguration. (Note, there is no option for a default gateway).\n\nAddress Autoconfiguration (A flag) \u003d ‘1’ means that it suggests the host creates its own IPv6 address using SLAAC.",
      "parentUuid": "ce5e4509_15b8410b",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e765b73_7b09c46e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-04T18:22:36Z",
      "side": 1,
      "message": "What has been lost?\nCurrent upstream behavior:\nDirect enum control of the DHCP entry, with \"none\", \"ipv4\" and \"true\" the only valid values. The \"true\" value only impacts DHCPv4.\nDirect D-Bus control of IPv6AcceptRA\nNo control of DHCPv6Client. If IPv6AcceptRA \u003d true, then DHCPv6Client\u003dtrue, which only allows \"stateful\" address assignment. If \"stateless\" or \"slaac\" are happening with this setting it is the result of how the RA daemon is configured.\nThis model is \"working\".\n\nMy new code:\nControl of DHCP, IPv6AcceptRA, and DHCPv6Client via defined enums.\nVia the enums DHCP, IPv6AcceptRA, and DHCPv6Client can be set exactly as desired.\nAll 8 possible states are controllable with intent, not due to side-effects.\nThere has only been a gain in capability, not a loss.\n\nAt present BMCWeb does not implement any of the StatelessAddressAutoConfiguration schema. Thus OBMC has no direct way to instruct phosphor-network/systemd-networkd to configure SLAAC with intent.",
      "parentUuid": "401b2592_235b8f4b",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5585ff37_2c46d58f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-04T18:22:36Z",
      "side": 1,
      "message": "Ratan,\nThanks for your response.\nPlease see my explanation/defense of the submission below.\nI do not see any loss of capability, only an improvement in capability.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67617405_f96de6b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-05-05T22:07:23Z",
      "side": 1,
      "message": "@William, I do not understand how this will break the network for your requirements. If that is the case, can you be explicit on what part of this change is the problem?\n\nJohnathan created this change because the network configuration is not currently working for our needs. Rather than make a little fix that would probably necessitate further changes in the future, he made this change more complete, filling in all the possibilities.\n\nThe options offered in the patch not only provide a way to put the BMC into any of the dynamic addressing modes (all combinations of DHCPv4, DHCPv6, SLAAC, and NONE), but also does so in a very straightforward interface that is independent of IPMI and Redfish.\n\nSomehow both you and Ratan have come to the conclusion that this does not support v6 stateless (SLAAC). I am not sure how that conclusion was reached, given that this is explicitly one of the options available. If you disagree with that, please let Johnathan know how it does not fulfill your interpretation of this requirement.\n\nIf you are still not convinced, I would invite you to test the code in your environment and provide specific feedback on what is not working so we can move this patch forward.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a53a0cb_f4e79069",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2022-05-06T02:13:14Z",
      "side": 1,
      "message": "+1\nIt would be good if we can figure out how to move this patch forward.  Thanks!",
      "parentUuid": "67617405_f96de6b9",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bb09438_44a5f0f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-06T07:57:02Z",
      "side": 1,
      "message": "@jonathan, Please correct me with the following.\n\n/ tuple elements: DHCP, IPv6AcceptRA, DHCPv6Client\nstd::map\u003cEthernetInterface::DHCPConf,\n         std::tuple\u003cstd::string, std::string, std::string\u003e\u003e\n    mapDHCPToSystemd \u003d {\n        {EthernetInterface::DHCPConf::both, {\"true\", \"true\", \"true\"}},\n        {EthernetInterface::DHCPConf::v4v6stateless, {\"true\", \"true\", \"false\"}},\n        {EthernetInterface::DHCPConf::v4, {\"true\", \"false\", \"false\"}},\n        {EthernetInterface::DHCPConf::v6, {\"false\", \"true\", \"true\"}},\n        {EthernetInterface::DHCPConf::v6stateless, {\"false\", \"true\", \"false\"}},\n        {EthernetInterface::DHCPConf::none, {\"false\", \"false\", \"false\"}}};\n\nNow if user has set the DHCP as none, IPV6acceptRA has become false. Is it correct or not?\n\nNow I only want to only enable the acceptRA,but no DHCP client.\n\nCan I do this with this current PATCH?",
      "parentUuid": "7e765b73_7b09c46e",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd94b4b_7a391855",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-06T14:54:35Z",
      "side": 1,
      "message": "Ratan, Ravi,\nThank you for your time to help move this commit forward.\nI hope that my explanation of the \u0027v6stateless\u0027 enum puts to rest any concern about SLAAC no being supported.\n",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "013bd653_c1a5b75d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-06T14:54:35Z",
      "side": 1,
      "message": "Ratan,\nThat is the correct reading of the final entry of the tuple.\n\nThe systemd.networkd \"DHCP\u003d\" only controls IPv4.\nYou can assign the \"DHCP\u003d\" to \"ipv6\" and nothing changes in the IPv6 network stack. Thus there are only two states for \"DHCP\u003d\", and they only control IPv4.\n\nThe only time the IPv6 network stack performs any auto-config is when the \"IPv6AcceptRA\u003d\" entry is \"true\". The default behavior is for systemd.network to automatically enable \"DHCPv6Client\u003dtrue\", which is \"stateful\" operation.\n\nTo achieve \"stateless\" operation the systemd.network configuration file has to explicitly set \"DHCPv6Client\u003dfalse\" to prevent the stack from searching for a DHCPv6 server on the local network segment.\n\nTo get into the state you are requesting the D-Bus \"v6stateless\" state is sent. I\u0027ve mentioned this, and Vernon mentioned this yesterday. This assigns:\n\"DHCP\u003dfalse\"  # IPv4 DHCP is inactive\n\"IPv6AcceptRA\u003dtrue\" # IPv6 DHCP is enabled because you can\u0027t \"DHCP\" without a Routing Advertisement server on the local segment.\n\"DHCPv6Client\u003dfalse\" # Prevent the BMC network stack from searching the local segment for a DHCPv6 server (ala isc-dhcp-server6)\n\nI tested this before submitting this commit. \nMy SUT has this in the systemd.network config file:\nDHCP\u003dfalse\nIPv6AcceptRA\u003dtrue\n[IPv6AcceptRA]\nDHCPv6Client\u003dfalse\n\nMy SUT has the following behavior as a result:\neth1: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast qlen 1000\n    link/ether a4:xx:xx:xx:xx:cf brd ff:ff:ff:ff:ff:ff\n\n# No IPv4 DHCP address, this is Link Local\n    inet 169.254.105.183/16 brd 169.254.255.255 scope link eth1\n       valid_lft forever preferred_lft forever\n\n# IPv6 self assigned address\n    inet6 fd54:2112:1812:0:a6xx:xxf:fexx:xxcf/64 scope global dynamic noprefixroute flags 100 \n       valid_lft 86397sec preferred_lft 14397sec\n\n# Link Local IPv6 address\n    inet6 fe80::a6xx:xxf:fexx:xxcf/64 scope link \n       valid_lft forever preferred_lft forever\n\n\n\nChanging DHCPv6Client to true gets the following:\n\neth1: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast qlen 1000\n    link/ether a4:xx:xx:xx:xx:cf brd ff:ff:ff:ff:ff:ff\n# No change to IPv4 state\n    inet 169.254.105.183/16 brd 169.254.255.255 scope link eth1\n       valid_lft forever preferred_lft forever\n\n# Stateful IPv6 DHCP address assignment from the RA and DHCPv6 servers\n    inet6 fd54:2112:1812::4130/128 scope global dynamic noprefixroute \n       valid_lft 2591972sec preferred_lft 604772sec\n\n# Link local IPv6 address\n    inet6 fe80::a6xx:xxf:fexx:xxcf/64 scope link \n       valid_lft forever preferred_lft forever",
      "parentUuid": "5bb09438_44a5f0f5",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b79d4ec_c399e5a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-07T06:01:57Z",
      "side": 1,
      "message": "Jonathan, Now while we are discussing, I see one more issue here.\ntuple elements: DHCP, IPv6AcceptRA, DHCPv6Client\n\n1)  {EthernetInterface::DHCPConf::v6stateless, {\"false\", \"true\", \"false\"}}\n\nThat means for the DHCPv6 stateless IP we are not starting the DHCPv6 client and as per me it is not correct, we should start the DHCPv6 client. Why?\n\nBecause for DHCPv6 stateless,  BMC will get the IP from the router but the other info like NTP,DNS details will be taken from the DHCP server.\n\nPlease refer the link below.\nhttps://www.networkacademy.io/ccna/ipv6/stateless-dhcpv6#:~:text\u003dStateless%20DHCPv6%20is%20used%20by,some%20other%20mechanism%20usually%20SLAAC.\n\n2) Now say I don\u0027t need DHCP at all, however I need the stateless auto config address.\n\nSay user has disabled DHCP by following busctl cmd(cmd may be syntactically wrong).\n\nbusctl call  xyz.openbmc_project.Network/xyz/openbmc_project/network/eth0 org.freedesktop.DBus.Properties Set ss xyz.openbmc_project.Network.EthernetInterface DHCP EthernetInterface::DHCPConf::none.\n\nNow user still want the SLAAC address, What should he do?\n\nWe don\u0027t want the DHCP API here, as we don\u0027t need to start the DHCP client here.\n\nIn all other cases of DHCP v6(Stateful or Stateless) we need to start the DHCpV6 client.\n\nDHCPv6 stateless(we still need dhcp client here) is different than autoconfigured address(we don\u0027t need DHCP at all).",
      "parentUuid": "013bd653_c1a5b75d",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f8f7a53_9c77e7f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-07T11:28:31Z",
      "side": 1,
      "message": "More Info:\n\nFollowing is a list of the typical combinations of address configuration bits set within the RA message sent by the local router.\n\nA\u003d1, M\u003d0, O\u003d0\n\nEnd host uses stateless auto-configuration(NO DHCP)\n\nA\u003d1, M\u003d0, O\u003d1\n\nEnd host uses SLAAC and stateless DHCPv6, autoconfigured address but DNS and other information is added from DHCPv6 server.\n\nA\u003d0, M\u003d1, O\u003d1\no   End host uses DHCPv6 for all information",
      "parentUuid": "1b79d4ec_c399e5a6",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "365a9c06_63ad9156",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-09T16:21:24Z",
      "side": 1,
      "message": "Extensive reply.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eacec461_88a9dde0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-09T16:21:24Z",
      "side": 1,
      "message": "Ratan,\n\nYou\u0027re proving that my configuration is correct.\n\n\u003e1)  {EthernetInterface::DHCPConf::v6stateless, {\"false\", \"true\", \"false\"}}\n\u003e That means for the DHCPv6 stateless IP we are not starting the DHCPv6 client \n\u003e and as per me it is not correct, we should start the DHCPv6 client. Why?\n\nStateless operation, by definition is configuration based solely on the Routing Advertisment Server on the local link. A DHCPv6 Server on the local link is **not** to be consulted.\n\nThe link you provided states the \"Routing Advertisement Server\" on the local link can send an \"O\u003d1\" response. This tells the BMC IPv6 stack to go find the \"Other\" source for DNS/NTP. This is \"Stateless with DHCPv6\" mode **forced** by the RA Server on the local link. It is a network infrastructure choice, made by the network link admin. The RA is specifically saying \"I don\u0027t care if you\u0027ve turned off DHCPv6 locally, do some/all of the RFC compliant DHCPv6 actions\".\n\n\u003e2) Now say I don\u0027t need DHCP at all, however I need the stateless auto config\n\u003e address.\n\nYou don\u0027t send \"none\". That explicitly tells the BMC networking stack you don\u0027t want IPv4 or any form of IPv6 address auto-config.\n\nThe Routing Advertisement Server on the local link has to be configured to not send the \"O\u003d1\" bit. You still have to have IPv6AcceptRA asserted to have any IPv6 \"auto configuration\" action to occur, whether Stateful, or Stateless. \n\nThis is, once again, a network infrastructure choice made by the network admin for the local link.\n\nIf IPv6AcceptRA is false, all IPv6 address assignment has to be done using static assignment. If IPv6AcceptRA is false it doesn\u0027t matter what you set DHCPv6Client to, it is ignored.\n\nIf the BMC has IPv6AcceptRA\u003dtrue and DHCPv6Client\u003dtrue then V6 Stateful operation is being performed. This is the \"v6\" enumeration. What happens still depends on how the RA Server and the DHCPv6 server are configured. In my testing, even if I had both of these values active, if the DHCPv6 server was misconfigured you still would not get a **stateful** assignment.\n\nFor this to work **ALL** of the individual servers and configuration variables must be set correctly.\n\nThat we are having this kind of detailed discussion of the guts of the OBMC IPv6 configuration leaves me to believe that exposing the individual pieces of the configuration options will lead to many users being unable to correctly configure their IPv6 OBMC/RA/DHCPv6 stack. The consensus will quickly build that OBMC cannot perform dynamic IPv6 address assignment. The defects will be filed in due time.\n\n\n\u003eFollowing is a list of the typical combinations of address configuration bits\n\u003e set within the RA message sent by the local router.\n\n\u003eA\u003d1, M\u003d0, O\u003d0\n\u003eEnd host uses stateless auto-configuration(NO DHCP)\nIPv6Stateless w/o DHCPv6. DHCPv6Client must be false.\n\n\u003eA\u003d1, M\u003d0, O\u003d1\n\u003eEnd host uses SLAAC and stateless DHCPv6, autoconfigured address but DNS and\n\u003e other information is added from DHCPv6 server.\nIPv6Stateless RA forcing DHCPv6 override.  DHCPv6Client must be false.\n\n\u003eA\u003d0, M\u003d1, O\u003d1\n\u003e End host uses DHCPv6 for all information\nIPv6 Stateful, DHCPv6Client must be true. RA is explicitly stating SLAAC is not being used.",
      "parentUuid": "4f8f7a53_9c77e7f1",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe79915_a3deb3b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-05-10T00:37:28Z",
      "side": 1,
      "message": "To me, it sounds like you have covered all of the commonly used cases.\n\nI am going to give this a +1, because I think the content is correct.\n\nIt needs to be rebased for a conflict, but I also think the comment on line ethernet_interface.cpp line #186 needs to be addressed as well.",
      "parentUuid": "365a9c06_63ad9156",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d99718b_8e8ebf1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2022-05-10T08:53:11Z",
      "side": 1,
      "message": "Sorry, we are not in agreement here, We should have the configuration for all.\n\n- DHCP stateless: Where BMC have to start the DHCPv6client for the other info(i.e DHCPv6 stateless)\n\n- DHCP Stateful : Where IP as well as other DHCP info BMC will be getting through the DHCP server, BMC have to start the DHCP client.\n \n- Stateless AutoConf IP: where BMC will not start the DHCP Client, only router advertised prefix will be used to address \n\nIf we have the configuration for all , we are good, otherwise not.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b15bb677_ce6ba5f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-05-20T06:41:45Z",
      "side": 1,
      "message": "Stateless AutoConf IP (A\u003d1, M\u003d0, O\u003d0)\n\u003d\u003d\u003e this is covered with below options\n{EthernetInterface::DHCPConf::v6stateless, {\"false\", \"true\", \"false\"}},\n{EthernetInterface::DHCPConf::v4v6stateless, {\"true\", \"true\", \"false\"}}\n\nDHCP stateless (A\u003d1, M\u003d0, O\u003d1)\n\u003d\u003d\u003e Not covered\n@Johnathan, Is this because, when you enable the DHCPv6 client, it overrides the RA provided IP and BMC gets the IP from DHCPv6 server?\n\nDHCP Stateful (A\u003d0, M\u003d1, O\u003d1)\n\u003d\u003d\u003e this is covered with below option\n{EthernetInterface::DHCPConf::v6, {\"false\", \"true\", \"true\"}},",
      "parentUuid": "1d99718b_8e8ebf1d",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3986f6_c0dfe81c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-06-02T15:38:36Z",
      "side": 1,
      "message": "\u003eDHCP stateless (A\u003d1, M\u003d0, O\u003d1)\n\u003e\u003d\u003d\u003e Not covered\n\nNot covered is vague. What explicitly did not work?\nDid you confirm the RA and DHCPv6 servers on the local link were properly configured?\nWhat is the expected outcome?",
      "parentUuid": "b15bb677_ce6ba5f5",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47f0c442_fa1d7a23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-03T08:13:51Z",
      "side": 1,
      "message": "This combination should assign the ip address from RA, and the DNS etc from the DHCP server. \n\nAt our setup, we got the DHCPv6 server\u0027s assigned IP which overrid the RA\u0027s IP. \nSo question is how did this get combination work with this commit ?",
      "parentUuid": "3c3986f6_c0dfe81c",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d2b2bec_232b4b18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-17T04:07:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eacec461_88a9dde0",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95cf57e2_ab8ebb5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-17T04:07:37Z",
      "side": 1,
      "message": "I think we can get this going now. More tests on this will reveal if some combinations are left or not. If they are left-out, we can work on them with a new commit.",
      "parentUuid": "47f0c442_fa1d7a23",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5838292d_ab1cc8be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-06-17T19:14:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfe79915_a3deb3b1",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d837c09_7629c9c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-29T14:20:13Z",
      "side": 1,
      "message": "Hi Ratan, your latest question relates to this thread. When we tested, we were not able to see this combination of (A\u003d1, M\u003d0, O\u003d1) working. Seems like this needs more investigations and tests. \n\nI believe that should not stop this commit to go ahead, as this commit has major functionalities which are needed for multiple other usecases and they work fine.",
      "parentUuid": "95cf57e2_ab8ebb5d",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d0fa4a8_c3765591",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-30T06:35:23Z",
      "side": 1,
      "message": "Any views on this Ratan?",
      "parentUuid": "4d837c09_7629c9c6",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f75c9f8c_dee81485",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 186,
      "author": {
        "id": 1001317
      },
      "writtenOn": "2022-04-06T04:41:50Z",
      "side": 1,
      "message": "It would be good if we break before default case.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "113632a1_cb8addb0",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 186,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-05-05T22:07:23Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "f75c9f8c_dee81485",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44ae05a4_9be999db",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 186,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-17T04:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "113632a1_cb8addb0",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bea20bb7_e8a7be17",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2022-05-05T13:58:21Z",
      "side": 1,
      "message": "I think we need to identify specific origin for SLAAC/DHCP v6 addresses to map with right redfish enum and display correct AddressOrigin \nfor SLAAC address displaying as \"AddressOrigin\": \"DHCPv6\" does not look correct to me.",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0360313e_5687d083",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-05-05T22:07:23Z",
      "side": 1,
      "message": "This is networking code, not Redfish code. The network configuration daemon should provide an interface that is independent of all the clients that would call into it. The interfaces should work for IPMI and Redfish, but should not have anything specific to either of them.",
      "parentUuid": "bea20bb7_e8a7be17",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c242b8a_70914e21",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2022-05-06T02:13:14Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "0360313e_5687d083",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6fc1b8_5901dca1",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2022-05-06T07:02:48Z",
      "side": 1,
      "message": "I get that, but Networkd should be able to identify DHCP address IP vs SLAAC IP and populate  correct origin enum on D-bus object right?\nThere is a enum defined for SLAAC but Networkd does not use.\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Network/IP.interface.yaml#L65",
      "parentUuid": "7c242b8a_70914e21",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba889094_2e1e3f4f",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-05-06T14:54:35Z",
      "side": 1,
      "message": "There is a commit that William has pending. One that I\u0027d like to see merged. It uses netlink to query the assignment source for each address on the NIC. IMO using netlink is the superior method for detecting how the IP address was actually assigned. Inferring assignment based on DHCP enablement is flawed.\n\nIPv6 can have multiple IP addresses on the NIC. One could be statically assigned, one SLAAC, and one Stateful. Using the current logic all of these instances would be flagged \"DHCP\" assigned, when there\u0027s at least one that is statically assigned.\n\nThe results from netlink only announce \"static\" and \"dynamic\". There\u0027s only a single bit. IMO this is enough. Stateful and Stateless/SLAAC required no human interaction on the client to acquire an IPv6 address. This is DHCP. If, on the other hand, you used a UI, and explicitly typed in an IPv6 address, and all the other IPv6 network configuration data, you\u0027ve used a static assignment.\n\nAs to the D-Bus interfaces entry. Sometimes entries get made that ultimately turn out to be an \"appendix\". Nobody can figure out what the human appendix is good for, but it\u0027s there anyway.\n\nAdditionally, the two reporting/control protocols OBMC uses, IPMI and Redfish, up to this point have not had an interface providing visibility/control over IPv6 SLAAC.\n\nSo far as I can determine, there\u0027s no way other than parsing IPv6 addresses for a specific pattern to determine if an address is SLAAC. The netlink API won\u0027t tell you. Inferring from the systemd.network configuration won\u0027t tell you, and parsing IPv6 addresses is a marginal idea to figure it out. Without a reliable method of identifying the IP address assignment mode I don\u0027t expect anyone is going to go out of their way to announce an IPv6 address as SLAAC assigned when, in the majority of use cases, reporting DHCP is enough.",
      "parentUuid": "fb6fc1b8_5901dca1",
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4f329a1_3f27c7b5",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1101,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-05-20T06:41:45Z",
      "side": 1,
      "message": "From the networkd file DHCP option can have below values.\n------------------------------------------------------------------\nDHCP\u003d\nEnables DHCPv4 and/or DHCPv6 client support. Accepts \"yes\", \"no\", \"ipv4\", or \"ipv6\". Defaults to \"no\".\n\nNote that DHCPv6 will by default be triggered by Router Advertisement, if that is enabled, regardless of this parameter. By enabling DHCPv6 support explicitly, the DHCPv6 client will be started regardless of the presence of routers on the link, or what flags the routers pass. See \"IPv6AcceptRA\u003d\".\n\nFurthermore, note that by default the domain name specified through DHCP is not used for name resolution. See option UseDomains\u003d below.\n\nSee the [DHCPv4] or [DHCPv6] sections below for further configuration options for the DHCP client support.\n\n------------------------------------------------------------------\n\nWhy are the mapped values set to true/false in this commit? This should take ipv4/ipv6 as well correct? Are you considering this flag only for IPv4DHCP enablement?",
      "range": {
        "startLine": 1097,
        "startChar": 0,
        "endLine": 1101,
        "endChar": 19
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "879ff318_b3f32558",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1101,
      "author": {
        "id": 1000278
      },
      "writtenOn": "2022-06-02T15:38:36Z",
      "side": 1,
      "message": "See my comments in https://gerrit.openbmc.org/c/openbmc/phosphor-networkd/+/54112\nI\u0027ve discussed all of this in the prior review comments.\nIn short: DHCP\u003d only controls IPv4, IPv6AcceptRA only controls SLAAC/DHCPv6.\nThis commit gave full, explicit control over the DHCP/IPv6AcceptRA/DHCPv6Client entries. Current code can\u0027t even turn off DHCPv6Client and have IPv6AcceptRA active, due to an erroneous implicit state check.",
      "parentUuid": "b4f329a1_3f27c7b5",
      "range": {
        "startLine": 1097,
        "startChar": 0,
        "endLine": 1101,
        "endChar": 19
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "823e0134_921e6eb8",
        "filename": "src/ethernet_interface.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1101,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-03T08:13:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "879ff318_b3f32558",
      "range": {
        "startLine": 1097,
        "startChar": 0,
        "endLine": 1101,
        "endChar": 19
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27e1859a_44732410",
        "filename": "src/network_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-05-04T11:14:33Z",
      "side": 1,
      "message": "Should this also go under ENABLE_IPV6_ACCEPT_RA compiler flag?",
      "range": {
        "startLine": 41,
        "startChar": 17,
        "endLine": 41,
        "endChar": 54
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49a39bdd_c08cabaf",
        "filename": "src/network_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 1000382
      },
      "writtenOn": "2022-06-17T04:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27e1859a_44732410",
      "range": {
        "startLine": 41,
        "startChar": 17,
        "endLine": 41,
        "endChar": 54
      },
      "revId": "2844d69f26aa3a6df325edb8fdf2c96376429e6b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}